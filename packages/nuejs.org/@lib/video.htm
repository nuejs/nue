
<!-- For Bunny CDN -->
<div @name="bunny-player" @click="toggle" class="player">

  <video ref="video" :poster="splash" width="{width}" muted/>

  <a class="play"></a>

  <script>

    mounted({ poster='', videoid }) {
      const base = 'https://video.nuejs.org'
      const video = this.video = this.$refs.video

      this.splash = poster[0] == '/' ? poster : `${base}/${videoid}/${poster || 'thumbnail.jpg'}`

      function addSource(filename, mime='video/mp4') {
        const el = document.createElement('source')
        el.src = `${base}/${videoid}/${filename}`
        el.type = mime
        video.appendChild(el)
      }

      if (video.canPlayType('application/vnd.apple.mpegURL')) {
        addSource('playlist.m3u8', 'application/x-mpegURL')

      } else {
        const width = getQuality(innerWidth)
        addSource(`play_${width}p.mp4`)
      }

      video.addEventListener('ended', () => {
        this.root.classList.remove('playing')
      })
    }


    toggle() {
      const { video } = this
      const { paused } = video
      paused ? video.play() : video.pause()

      this.root.classList.toggle('playing', paused)
      this.root.parentNode.classList.remove('splash')
      player = this
    }
  </script>

</div>


<script>
  let player = null

  function getQuality(max) {
    const widths = [720, 480, 360]
    return widths.find(w => w < max)
  }

  function handleKeyboard() {
    function handle(e) {

      if (!player || e.metaKey || e.ctrlKey || e.target.matches('input, textarea')) return

      const { video } = player
      const is_fullscreen = document.fullscreenElement
      const { key } = e

      if (key == 'f') {
        is_fullscreen ? document.exitFullscreen() : video.requestFullscreen()

      } else if (!is_fullscreen) {
        if (key == ' ') player.toggle.call(player)
        if (key == 'ArrowLeft') video.currentTime -= 5
        if (key == 'ArrowRight') video.currentTime += 5
        if (key == 'Escape') {
          video.closest('.video')?.classList.add('splash')
          video.classList.remove('playing')
          video.load()
        }
      }
    }
    addEventListener('keydown', handle)
    addEventListener('route', () => removeEventListener('keydown', handle), { once: true })
  }

  handleKeyboard()
</script>

